{"version":3,"sources":["framework/Types.tsx","framework/Button.tsx","framework/Input.tsx","assets/logo_big_transparent.png","components/Branding.tsx","framework/Dropdown.tsx","components/InstanceSelection.tsx","util/FormError.tsx","pages/Login.tsx"],"names":["getColor","props","value","primary","danger","secondary","success","warning","deleteProps","keys","key","Button","p","className","Input","useState","onChange","console","log","labelText","Branding","src","Logo","Dropdown","dropdownRef","useRef","open","setOpen","selected","setSelected","children","map","x","i","child","onClick","event","index","findIndex","y","id","useEffect","handleClick","element","current","target","contains","window","addEventListener","removeEventListener","Fragment","ref","item","DropdownItem","React","createElement","icon","name","category","document","getElementById","InstancePage","lazy","InstanceSelection","history","useHistory","instances","useSelector","s","defaultValue","instance","alt","host","push","location","pathname","path","replaceAll","component","getFormError","error","keysArr","split","first","Array","isArray","_errors","message","slice","join","LoginScreen","t","useTranslation","setInstance","setEmail","setPassword","test","e","autoComplete","type","to"],"mappings":"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","file":"static/js/3.873a51db.chunk.js","sourcesContent":["import React from \"react\";\n\nexport interface ColorProps {\n\tprimary?: boolean;\n\tsecondary?: boolean;\n\tsuccess?: boolean;\n\twarning?: boolean;\n\tdanger?: boolean;\n}\n\nexport interface Children {\n\tchildren?: React.ReactNode;\n}\n\nexport function getColor(props: ColorProps) {\n\tconst value = (() => {\n\t\tif (props.primary) return \"primary\";\n\t\tif (props.danger) return \"danger\";\n\t\tif (props.secondary) return \"secondary\";\n\t\tif (props.success) return \"success\";\n\t\tif (props.warning) return \"warning\";\n\t})();\n\tdeleteProps(props, \"primary\", \"danger\", \"secondary\", \"success\", \"warning\");\n\n\treturn value || \"\";\n}\n\nexport function deleteProps(props: any, ...keys: string[]) {\n\tfor (const key of keys) {\n\t\tdelete props[key];\n\t}\n\treturn props;\n}\n","import React from \"react\";\nimport { ColorProps, getColor } from \"./Types\";\nimport \"fosscord-css/scss/button.scss\";\n\nexport interface ButtonProps\n\textends ColorProps,\n\t\tReact.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> {}\n\nexport function Button(p: ButtonProps) {\n\tlet props = { ...p };\n\tprops.className = `button ${props.className || \"\"} ${getColor(props)}`;\n\n\treturn <button {...props}></button>;\n}\n","import { useState } from \"react\";\nimport { deleteProps } from \"./Types\";\nimport \"fosscord-css/scss/input-fields.scss\";\n\nexport interface InputProps\n\textends React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> {\n\tlabelText?: string;\n}\n\nexport function Input(p: InputProps) {\n\tvar props = { ...p };\n\tprops.className = `input ${props.className || \"\"}`;\n\n\tconst [value, setValue] = useState(\"\");\n\n\tif (!props.onChange && !props.value) {\n\t\t// props.value = value;\n\t\tprops.onChange = console.log;\n\t}\n\n\treturn (\n\t\t<label className=\"input-wrapper\">\n\t\t\t<p className=\"label title text\">{props.labelText}</p>\n\t\t\t<input {...deleteProps(props, \"labelText\")} />\n\t\t</label>\n\t);\n}\n","export default __webpack_public_path__ + \"static/media/logo_big_transparent.c79a2a72.png\";","import Logo from \"../assets/logo_big_transparent.png\";\nimport \"./Branding.scss\";\n\nexport function Branding() {\n\treturn (\n\t\t<div className=\"branding\">\n\t\t\t<img src={Logo} />\n\t\t\t<h2 className=\"text headline\">Fosscord</h2>\n\t\t</div>\n\t);\n}\n","import { deleteProps } from \"./Types\";\nimport \"fosscord-css/scss/icons.scss\";\nimport \"fosscord-css/scss/dropdown.scss\";\nimport React, { MouseEvent, MouseEventHandler, ReactElement, useEffect, useRef, useState } from \"react\";\n\nexport interface DropdownProps {\n\tlabelText?: string;\n\tclassName?: string;\n\tchildren: ReactElement<DropdownItemProps>[];\n\tonChange?: (index: number, element: ReactElement<DropdownItemProps>) => any;\n}\n\nwindow.addEventListener(\"mousedown\", (event) => {\n\tvar element = document.getElementById(\"parent-node\");\n});\n\nexport function Dropdown(props: DropdownProps) {\n\tconst dropdownRef = useRef<HTMLDivElement>(null);\n\tconst [open, setOpen] = useState(false);\n\tconst [selected, setSelected] = useState(0);\n\n\tconst children = props.children.map((x, i) => {\n\t\tconst child = { ...x, props: { ...x.props } };\n\t\tif (i === selected) child.props.selected = true;\n\n\t\tif (!child.props.onClick) {\n\t\t\tchild.props.onClick = (event: MouseEvent<HTMLDivElement>) => {\n\t\t\t\tconst index = props.children.findIndex((y) => y.props.id === child.props.id);\n\t\t\t\tsetSelected(index);\n\t\t\t\tsetOpen(false);\n\t\t\t\tprops.onChange?.(index, props.children[index]);\n\t\t\t};\n\t\t}\n\n\t\treturn child;\n\t});\n\n\tuseEffect(() => {\n\t\t// this will close the dropdown menu if the user clicks on anything else then the dropdown menu\n\t\tfunction handleClick(this: HTMLElement, event: Event) {\n\t\t\tvar element = dropdownRef.current;\n\t\t\t// @ts-ignore\n\t\t\tif (event.target !== element && !element?.contains(event.target)) {\n\t\t\t\tsetOpen(false);\n\t\t\t}\n\t\t}\n\n\t\twindow.addEventListener(\"click\", handleClick);\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener(\"click\", handleClick);\n\t\t};\n\t}, []);\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div className=\"text title\">{props.labelText}</div>\n\t\t\t<div ref={dropdownRef} className={`dropdown ${props.className || \"\"} ${open && \"open\"}`}>\n\t\t\t\t<div className=\"control item\" onClick={() => setOpen(!open)}>\n\t\t\t\t\t<span className=\"left\">\n\t\t\t\t\t\t{{ ...children[selected], props: { ...children[selected].props, item: true } }}\n\t\t\t\t\t</span>\n\t\t\t\t\t<span className=\"right\">\n\t\t\t\t\t\t<i className=\"icon chevron-down\"></i>\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"menu\">{children}</div>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n}\n\nexport interface DropdownItemProps {\n\tclassName?: string;\n\tonClick?: MouseEventHandler<HTMLDivElement>;\n\tname?: string;\n\ticon?: string | any;\n\tcategory?: string;\n\tselected?: boolean;\n\tchildren?: React.ReactNode;\n\tid: string;\n\titem?: boolean;\n}\n\nexport function DropdownItem(props: DropdownItemProps) {\n\treturn React.createElement(\n\t\tprops.item ? React.Fragment : \"div\",\n\t\t!props.item\n\t\t\t? {\n\t\t\t\t\tid: props.id,\n\t\t\t\t\tclassName: `item ${props.className || \"\"} ${props.selected ? \"selected\" : \"\"}`,\n\t\t\t\t\tonClick: props.onClick,\n\t\t\t\t\tkey: props.id,\n\t\t\t  }\n\t\t\t: {\n\t\t\t\t\tkey: props.id,\n\t\t\t  },\n\t\t<>\n\t\t\t{props.icon &&\n\t\t\t\t(typeof props.icon === \"string\" ? <i className={\"prefix icon \" + props.icon}> </i> : props.icon)}\n\t\t\t<span className=\"name\">{props.name}</span>\n\t\t\t<span className=\"category text title\">{props.category}</span>{\" \"}\n\t\t</>\n\t);\n}\n","import { RootState, useSelector } from \"react-redux\";\nimport { Modal } from \"../framework/Modal\";\nimport { Dropdown, DropdownItem } from \"../framework/Dropdown\";\nimport { Instance } from \"../reducers/instances\";\nimport \"./InstanceSelection.scss\";\nimport React, { useState } from \"react\";\nimport { Route, useHistory } from \"react-router\";\n\nconst InstancePage = React.lazy(() => import(\"../pages/Instance\"));\n\nexport interface InstanceSelectionProps {\n\tonChange?: (instance: Instance) => any;\n\tdefaultValue?: Instance;\n}\n\nexport function InstanceSelection(props: InstanceSelectionProps) {\n\tconst history = useHistory();\n\tconst instances = useSelector((s: RootState) => s.instances);\n\tif (!props.defaultValue) props.onChange?.(instances[0]);\n\n\treturn (\n\t\t<>\n\t\t\t<Dropdown\n\t\t\t\tclassName=\"instance-selection\"\n\t\t\t\tlabelText=\"Instance\"\n\t\t\t\tonChange={(index) => props.onChange?.(instances[index])}\n\t\t\t\tchildren={[\n\t\t\t\t\t...instances.map((instance) => {\n\t\t\t\t\t\tconst icon = instance.icon && <img className=\"icon\" alt=\"\" src={instance.icon}></img>;\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<DropdownItem\n\t\t\t\t\t\t\t\tname={instance.host}\n\t\t\t\t\t\t\t\tkey={instance.id}\n\t\t\t\t\t\t\t\tid={instance.id}\n\t\t\t\t\t\t\t\ticon={icon}\n\t\t\t\t\t\t\t></DropdownItem>\n\t\t\t\t\t\t);\n\t\t\t\t\t}),\n\t\t\t\t\t<DropdownItem\n\t\t\t\t\t\tname=\"Add Instance\"\n\t\t\t\t\t\tid=\"add_instance\"\n\t\t\t\t\t\tkey=\"add_instance\"\n\t\t\t\t\t\ticon=\"plus\"\n\t\t\t\t\t\tonClick={() => history.push(`${history.location.pathname}/instance`)}\n\t\t\t\t\t></DropdownItem>,\n\t\t\t\t]}\n\t\t\t/>\n\t\t\t<Route\n\t\t\t\tpath={`${history.location.pathname.replaceAll(\"/instance\", \"\")}/instance`}\n\t\t\t\tcomponent={InstancePage}\n\t\t\t></Route>\n\t\t</>\n\t);\n}\n","import \"missing-native-js-functions\";\nimport { ReactNode } from \"react\";\n\nexport function getFormError(error: any, keys: string): string | ReactNode {\n\tif (!error) return \"\";\n\tif (!keys) return \"\";\n\n\tconst keysArr = keys.split(\".\");\n\tconst key = keysArr.first();\n\t// @ts-ignore\n\tconst value = error[key];\n\n\tif (value && Array.isArray(value._errors)) {\n\t\treturn value._errors.map((x: any) => (\n\t\t\t<>\n\t\t\t\t{x.message}\n\t\t\t\t<br />\n\t\t\t</>\n\t\t));\n\t}\n\n\treturn getFormError(value, keysArr.slice(1).join(\".\"));\n}\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Instance } from \"../reducers/instances\";\nimport { Branding } from \"../components/Branding\";\nimport { InstanceSelection } from \"../components/InstanceSelection\";\nimport { Button } from \"../framework/Button\";\nimport { Input } from \"../framework/Input\";\nimport \"./Login.scss\";\nimport { getFormError } from \"../util/FormError\";\n\nexport default function LoginScreen() {\n\tconst { t } = useTranslation(\"login\");\n\tconst [instance, setInstance] = useState({} as Instance);\n\tconst [email, setEmail] = useState(\"\");\n\tconst [password, setPassword] = useState(\"\");\n\n\treturn (\n\t\t<div className=\"page login\">\n\t\t\t<form className=\"form\">\n\t\t\t\t<Branding />\n\t\t\t\t<h1 className=\"text headline\">{t(\"login\")}</h1>\n\n\t\t\t\t<InstanceSelection defaultValue={instance} onChange={(x) => setInstance(x)} />\n\t\t\t\t{/* email or phone autocomplete */}\n\t\t\t\t<p className=\"text danger error\">{getFormError({ test: \"error\" }, \"test\")}</p>\n\t\t\t\t<Input\n\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\n\t\t\t\t\tautoComplete=\"email\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclassName=\"emailPhone\"\n\t\t\t\t\tlabelText={t(\"emailTelephone\")}></Input>\n\n\t\t\t\t<Input\n\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n\t\t\t\t\tclassName=\"password\"\n\t\t\t\t\ttype=\"password\"\n\t\t\t\t\tlabelText={t(\"password\")}\n\t\t\t\t\tautoComplete=\"current-password\"></Input>\n\n\t\t\t\t{/* // TODO instance selection */}\n\n\t\t\t\t<Link className=\"small\" to=\"/resetPassword\">\n\t\t\t\t\t{t(\"forgotPassword\")}\n\t\t\t\t</Link>\n\n\t\t\t\t<Button className=\"submit \" primary>\n\t\t\t\t\t{t(\"login\")}\n\t\t\t\t</Button>\n\n\t\t\t\t<div className=\"text muted\">\n\t\t\t\t\t{t(\"registerNotice\")}\n\t\t\t\t\t<Link to=\"/register\">{t(\"register\")}</Link>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</div>\n\t);\n}\n"],"sourceRoot":""}